{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","filter","filterList","map","tasks","setTasks","taskList","updatedTasks","remainingTasks","editedTaskList","tasksNoun","length","headingText","newTask","nanoid","aria-labelledby","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.feacf813.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Todo = props => {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState(''); \r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setEditing(false);\r\n    if(newName !== ''){\r\n      props.editTask(props.id, newName);\r\n      setNewName(\"\");\r\n    }\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n          <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n\r\nexport default Todo","import React, { useState } from \"react\";\r\n\r\nconst Form = props => {\r\n    const [name, setName] = useState('');\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n    \r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if(name !== ''){\r\n            props.addTask(name);\r\n            setName(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <h2 className=\"label-wrapper\">\r\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n            What needs to be done?\r\n            </label>\r\n        </h2>\r\n        <input\r\n            type=\"text\"\r\n            id=\"new-todo-input\"\r\n            className=\"input input__lg\"\r\n            name=\"text\"\r\n            autoComplete=\"off\"\r\n            value={name}\r\n            onChange={handleChange}\r\n        />\r\n        <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n            Add\r\n        </button>\r\n        </form>\r\n  );\r\n}\r\n\r\nexport default Form;","const FilterButton = props => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import React, { useState } from \"react\";\r\nimport Todo from \"./components/Todo\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: task => !task.completed,\r\n  Completed: task => task.completed\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const [filter, setFilter] = useState('All');\r\n  \r\n  const filterList = FILTER_NAMES.map(name => (\r\n    <FilterButton\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  const [tasks, setTasks] = useState(props.tasks);  \r\n  const taskList = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .map(task => (\r\n      <Todo \r\n        id={task.id} \r\n        name={task.name} \r\n        completed={task.completed} \r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        editTask={editTask}\r\n      />\r\n  ));\r\n  \r\n  function addTask(name) {\r\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  }\r\n  \r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = tasks.map(task => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        // use object spread to make a new object\r\n        // whose `completed` prop has been inverted\r\n        return {...task, completed: !task.completed}\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  }\r\n  \r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter(task => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  }\r\n  \r\n  function editTask(id, newName) {\r\n    const editedTaskList = tasks.map(task => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        //\r\n        return {...task, name: newName}\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  }\r\n\r\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n  \r\n  return (\r\n    <div className=\"todoapp stack-large\">\r\n      <h1>TodoApp</h1>\r\n      <Form addTask={addTask}/>\r\n      <div className=\"filters btn-group stack-exception\">\r\n        {filterList}\r\n      </div>\r\n      <h2 id=\"list-heading\">\r\n        {headingText}\r\n      </h2>\r\n      <ul\r\n        className=\"todo-list stack-large stack-exception\"\r\n        aria-labelledby=\"list-heading\"\r\n      >\r\n        {taskList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}